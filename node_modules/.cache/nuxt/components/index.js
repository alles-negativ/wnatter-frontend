export const Accordion = () => import('../../../../components/Accordion/Accordion.vue' /* webpackChunkName: "components/accordion" */).then(c => wrapFunctional(c.default || c))
export const Articles = () => import('../../../../components/Articles/Articles.vue' /* webpackChunkName: "components/articles" */).then(c => wrapFunctional(c.default || c))
export const Firma = () => import('../../../../components/Firma/Firma.vue' /* webpackChunkName: "components/firma" */).then(c => wrapFunctional(c.default || c))
export const Map = () => import('../../../../components/Map/Map.vue' /* webpackChunkName: "components/map" */).then(c => wrapFunctional(c.default || c))
export const Header = () => import('../../../../components/Header/Header.vue' /* webpackChunkName: "components/header" */).then(c => wrapFunctional(c.default || c))
export const Footer = () => import('../../../../components/Footer/Footer.vue' /* webpackChunkName: "components/footer" */).then(c => wrapFunctional(c.default || c))
export const CookieBox = () => import('../../../../components/CookieBox/CookieBox.vue' /* webpackChunkName: "components/cookie-box" */).then(c => wrapFunctional(c.default || c))
export const Navigation = () => import('../../../../components/Navigation/Navigation.vue' /* webpackChunkName: "components/navigation" */).then(c => wrapFunctional(c.default || c))
export const Person = () => import('../../../../components/Person/Person.vue' /* webpackChunkName: "components/person" */).then(c => wrapFunctional(c.default || c))

// nuxt/nuxt.js#8607
function wrapFunctional(options) {
  if (!options || !options.functional) {
    return options
  }

  const propKeys = Array.isArray(options.props) ? options.props : Object.keys(options.props || {})

  return {
    render(h) {
      const attrs = {}
      const props = {}

      for (const key in this.$attrs) {
        if (propKeys.includes(key)) {
          props[key] = this.$attrs[key]
        } else {
          attrs[key] = this.$attrs[key]
        }
      }

      return h(options, {
        on: this.$listeners,
        attrs,
        props,
        scopedSlots: this.$scopedSlots,
      }, this.$slots.default)
    }
  }
}
